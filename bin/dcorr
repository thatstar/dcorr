#!/usr/bin/env python

import argparse
import numpy as np
from dcorr.dynamics import dynamics, type_masker


def cmd_options():
    parser = argparse.ArgumentParser(
        description="Calculate time-dependent sisf sisfX4 msd alpha2 Qt and QtX4 values."
    )

    addarg = parser.add_argument
    addarg("ncorr", type=int, help="window width to calculate correlations")
    addarg("nshift", type=int, help="shift time origin for this many frames")
    addarg("dt", type=float, help="timestep size of MD run")
    addarg("dumpfile", type=str, help="name of LAMMPS dump files")
    addarg("outputfile", type=str, help="name of output file")
    addarg("--itype", type=int, default=0, help="type of atoms to include in calculation, 0 for all types")
    addarg("--qmax", type=float, default=1.0, help="|q| value")
    addarg("--rtol", type=float, default=1.0, help="distance cutoff to check atom overlap")
    addarg("--maxframes", type=int, default=0, help="number of frames to read from dump, 0 for all frames")

    return parser.parse_args()


def main():
    args = cmd_options()
    print("Start calculations:")
    res = dynamics(args.dumpfile, args.ncorr, args.nshift, masker=type_masker(args.itype),
                   qmax=args.qmax, rtol=args.rtol, dt=args.dt, maxframes=args.maxframes)
    np.savetxt(args.outputfile, res, header="t sisf sisfX4 Qt QtX4 msd alpha2")
    print("All done.")


if __name__ == "__main__":
    main()

